C51 COMPILER V9.01   Z_PWM                                                                 06/27/2020 17:53:35 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE Z_PWM
OBJECT MODULE PLACED IN .\obj\z_pwm.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE src\z_pwm.c LARGE BROWSE ORDER INCDIR(.\src) DEBUG OBJECTEXTEND PRINT(.\lst
                    -\z_pwm.lst) OBJECT(.\obj\z_pwm.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC15Fxx 系列 使用增强型PWM控制舞台灯光示例---------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966-------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.GXWMCU.com --------------------------------------------*/
   9          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  10          /* 如果要在文章中应用此代码,请在文章中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          //本示例在Keil开发环境下请选择Intel的8058芯片型号进行编译
  14          //若无特别说明,工作频率一般为11.0592MHz
  15          
  16          
  17          #include <stdio.h>
  18          #include "z_pwm.h"
  19          #include "z_global.h"
  20          #include "z_uart.h"
  21          
  22          #define CYCLE 1000
  23          
  24          void car_pwm_set(int car_left, int car_right) {
  25   1              static int car_left_bak, car_right_bak;
  26   1              static char car_zx_count = 0, car_zx_count0 = 0;
  27   1      //      if(car_left >= CYCLE)car_left = CYCLE-1;
  28   1      //      else if(car_left <= -CYCLE)car_left = -CYCLE+1;
  29   1      //      else if(car_left == 0)car_left = 1;
  30   1      //      
  31   1      //      if(car_right >= CYCLE)car_right = CYCLE-1;
  32   1      //      else if(car_right <= -CYCLE)car_right = -CYCLE+1;
  33   1      //      else if(car_right == 0)car_right = 1;
  34   1      //      
  35   1      
  36   1      //      car_left = -car_left;
  37   1      //      car_right = -car_right;
  38   1      //      
  39   1      //      if(car_left>-30 && car_left<30)car_left=0;
  40   1      //      if(car_right>-30 && car_right<30)car_right=0;
  41   1      //      
  42   1      //      if(car_right>0) {
  43   1      //              PWM3_SetPwmWide(car_right);
  44   1      //              PWM2_SetPwmWide(0);
  45   1      //      } else {
  46   1      //              PWM3_SetPwmWide(0);
  47   1      //              PWM2_SetPwmWide(-car_right);
  48   1      //      }
  49   1      //      
  50   1      //      if(car_left>0) {
  51   1      //              PWM4_SetPwmWide(car_left);
  52   1      //              PWM5_SetPwmWide(0);             
  53   1      //      } else {
  54   1      //              PWM4_SetPwmWide(0);
C51 COMPILER V9.01   Z_PWM                                                                 06/27/2020 17:53:35 PAGE 2   

  55   1      //              PWM5_SetPwmWide(-car_left);
  56   1      //      }       
  57   1              
  58   1              //总线马达设置    
  59   1              if((car_left_bak != car_left) || (car_right_bak != car_right)) {
  60   2                      if(car_zx_count++ < 3) {
  61   3                              sprintf((char *)cmd_return, "{#006P%04dT0000!#007P%04dT0000!}", 
  62   3                              (int)(1500+car_left), (int)(1500-car_right));
  63   3                              zx_uart_send_str(cmd_return);
  64   3                      } else {
  65   3                              car_left_bak = car_left;
  66   3                              car_right_bak = car_right;
  67   3                              car_zx_count = 0;
  68   3                      }
  69   2                      car_zx_count0 = 0;
  70   2              } else {
  71   2              }
  72   1              
  73   1              if(car_left == 0 || car_right == 0) {
  74   2                      if(car_zx_count0++ < 3) {
  75   3                              sprintf((char *)cmd_return, "{#006P%04dT0000!#007P%04dT0000!}", 
  76   3                              (int)(1500+car_left), (int)(1500-car_right));
  77   3                              zx_uart_send_str(cmd_return);
  78   3                      }
  79   2              }                       
  80   1              return;
  81   1      }
  82          
  83          void pwm_init(unsigned short cycle){
  84   1          
  85   1      //              P0M0 &= ~0xc0;
  86   1      //    P0M1 &= ~0xc0;
  87   1      //    P0 &= ~0xc0;                    //设置P0.6/.P0.7电平
  88   1      //    
  89   1      //              P2M0 |= 0x0e;
  90   1      //    P2M1 &= ~0x0e;
  91   1      //    P2 &= ~0x0e;                    //设置P2.1/P2.2/P2.3电平
  92   1      //    
  93   1      //              P3M0 |= 0x80;
  94   1      //    P3M1 &= ~0x80;
  95   1      //    P3 &= ~0x80;                    //设置P3.7电平
  96   1      
  97   1          P_SW2 |= 0x80;
  98   1          PWMCKS = 0x1F;
  99   1          PWMC = cycle;                   //设置PWM周期
 100   1          PWM2T1 = 1;
 101   1          PWM2T2 = 0;
 102   1          PWM2CR = 0x00;                  //PWM2输出到P3.7
 103   1          PWM3T1 = 1;
 104   1          PWM3T2 = 0;
 105   1          PWM3CR = 0x00;                  //PWM3输出到P2.1
 106   1          PWM4T1 = 1;
 107   1          PWM4T2 = 0;
 108   1          PWM4CR = 0x00;                  //PWM4输出到P2.2
 109   1          PWM5T1 = 1;
 110   1          PWM5T2 = 0;
 111   1          PWM5CR = 0x00;                  //PWM5输出到P2.3
 112   1      //    PWM6T1 = 1;
 113   1      //    PWM6T2 = 0;
 114   1      //    PWM6CR = 0x08;                  //PWM6输出到P0.7
 115   1      //    PWM7T1 = 1;
 116   1      //    PWM7T2 = 0;
C51 COMPILER V9.01   Z_PWM                                                                 06/27/2020 17:53:35 PAGE 3   

 117   1      //    PWM7CR = 0x08;                  //PWM7输出到P0.6
 118   1          PWMCFG = 0x00;                  //配置PWM的输出初始电平
 119   1          PWMCR = 0x0f;                   //使能PWM信号输出
 120   1          PWMCR |= 0x80;                  //使能PWM模块
 121   1          P_SW2 &= ~0x80;
 122   1      }
 123          
 124          void PWM2_SetPwmWide(unsigned short Wide)
 125          {
 126   1          if (Wide == 0)
 127   1          {
 128   2              PWMCR &= ~0x01;
 129   2              PWM2 = 0;
 130   2          }
 131   1          else if (Wide >= CYCLE)
 132   1          {
 133   2              PWMCR &= ~0x01;
 134   2              PWM2 = 1;
 135   2          }
 136   1          else
 137   1          {
 138   2              P_SW2 |= 0x80;
 139   2              PWM2T1 = Wide;
 140   2              P_SW2 &= ~0x80;
 141   2              PWMCR |= 0x01;
 142   2          }
 143   1      }
 144          
 145          void PWM3_SetPwmWide(unsigned short Wide)
 146          {
 147   1          if (Wide == 0)
 148   1          {
 149   2              PWMCR &= ~0x02;
 150   2              PWM3 = 0;
 151   2          }
 152   1          else if (Wide >= CYCLE)
 153   1          {
 154   2              PWMCR &= ~0x02;
 155   2              PWM3 = 1;
 156   2          }
 157   1          else
 158   1          {
 159   2              P_SW2 |= 0x80;
 160   2              PWM3T1 = Wide;
 161   2              P_SW2 &= ~0x80;
 162   2              PWMCR |= 0x02;
 163   2          }
 164   1      }
 165          
 166          void PWM4_SetPwmWide(unsigned short Wide)
 167          {
 168   1          if (Wide == 0)
 169   1          {
 170   2              PWMCR &= ~0x04;
 171   2              PWM4 = 0;
 172   2          }
 173   1          else if (Wide >= CYCLE)
 174   1          {
 175   2              PWMCR &= ~0x04;
 176   2              PWM4 = 1;
 177   2          }
 178   1          else
C51 COMPILER V9.01   Z_PWM                                                                 06/27/2020 17:53:35 PAGE 4   

 179   1          {
 180   2              P_SW2 |= 0x80;
 181   2              PWM4T1 = Wide;
 182   2              P_SW2 &= ~0x80;
 183   2              PWMCR |= 0x04;
 184   2          }
 185   1      }
 186          
 187          void PWM5_SetPwmWide(unsigned short Wide)
 188          {
 189   1          if (Wide == 0)
 190   1          {
 191   2              PWMCR &= ~0x08;
 192   2              PWM5 = 0;
 193   2          }
 194   1          else if (Wide >= CYCLE)
 195   1          {
 196   2              PWMCR &= ~0x08;
 197   2              PWM5 = 1;
 198   2          }
 199   1          else
 200   1          {
 201   2              P_SW2 |= 0x80;
 202   2              PWM5T1 = Wide;
 203   2              P_SW2 &= ~0x80;
 204   2              PWMCR |= 0x08;
 205   2          }
 206   1      }
 207          
 208          /*
 209          void PWM6_SetPwmWide(unsigned short Wide)
 210          {
 211              if (Wide == 0)
 212              {
 213                  PWMCR &= ~0x10;
 214                  PWM6 = 0;
 215              }
 216              else if (Wide == CYCLE)
 217              {
 218                  PWMCR &= ~0x10;
 219                  PWM6 = 1;
 220              }
 221              else
 222              {
 223                  P_SW2 |= 0x80;
 224                  PWM6T1 = Wide;
 225                  P_SW2 &= ~0x80;
 226                  PWMCR |= 0x10;
 227              }
 228          }
 229          
 230          void PWM7_SetPwmWide(unsigned short Wide)
 231          {
 232              if (Wide == 0)
 233              {
 234                  PWMCR &= ~0x20;
 235                  PWM7 = 0;
 236              }
 237              else if (Wide == CYCLE)
 238              {
 239                  PWMCR &= ~0x20;
 240                  PWM7 = 1;
C51 COMPILER V9.01   Z_PWM                                                                 06/27/2020 17:53:35 PAGE 5   

 241              }
 242              else
 243              {
 244                  P_SW2 |= 0x80;
 245                  PWM7T1 = Wide;
 246                  P_SW2 &= ~0x80;
 247                  PWMCR |= 0x20;
 248              }
 249          }
 250          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    541    ----
   CONSTANT SIZE    =     33    ----
   XDATA SIZE       =      6       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
