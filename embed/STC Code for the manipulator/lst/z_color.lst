C51 COMPILER V9.56.0.0   Z_COLOR                                                           08/20/2020 16:29:15 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE Z_COLOR
OBJECT MODULE PLACED IN .\obj\z_color.obj
COMPILER INVOKED BY: e:\Keil_v5\C51\BIN\C51.EXE src\z_color.c LARGE OPTIMIZE(8,SPEED) BROWSE ORDER INCDIR(.\src) DEBUG O
                    -BJECTEXTEND PRINT(.\lst\z_color.lst) TABS(2) OBJECT(.\obj\z_color.obj)

line level    source

   1          #include "z_color.h"  
   2          
   3          COLOR_RGBC rgb;
   4          COLOR_HSL  hsl;
   5          
   6          /******************************************************************************/
   7          void delay_s(u32 i)
   8          {
   9   1        while(i--);
  10   1      }
  11          /******************************************************************************/
  12          void TCS34725_I2C_Init()
  13          {
  14   1        TCS_SDA_H;
  15   1        TCS_SCL_H;  
  16   1      }
  17          /*********************************************/
  18          void TCS34725_I2C_Start()
  19          {
  20   1        TCS_SDA_H;
  21   1        TCS_SCL_H;
  22   1        delay_s(40);//delay_us(4);
  23   1        TCS_SDA_L;
  24   1        delay_s(40);//delay_us(4);
  25   1        TCS_SCL_L;
  26   1      }
  27          /*********************************************/
  28          void TCS34725_I2C_Stop()
  29          {
  30   1        TCS_SCL_L;
  31   1        TCS_SDA_L;
  32   1        delay_s(40);//delay_us(4);
  33   1        TCS_SCL_H;
  34   1        TCS_SDA_H;
  35   1        delay_s(40);//delay_us(4);                  
  36   1      }
  37          /*********************************************/
  38          //返回值：1，接收应答失败
  39          //        0，接收应答成功
  40          u8 TCS34725_I2C_Wait_ACK()
  41          {
  42   1        u32 t=0;
  43   1        
  44   1        TCS_SDA_H; 
  45   1        delay_s(10);//delay_us(1);
  46   1        TCS_SCL_H; 
  47   1        delay_s(10);//delay_us(1);
  48   1        while(TCS_SDA_READ)
  49   1        {
  50   2          t++;
  51   2          if(t > 250)
  52   2          {
  53   3            TCS34725_I2C_Stop();
  54   3            return 1;
C51 COMPILER V9.56.0.0   Z_COLOR                                                           08/20/2020 16:29:15 PAGE 2   

  55   3          }
  56   2        }
  57   1        TCS_SCL_L;
  58   1        return 0; 
  59   1      }
  60          /*********************************************/
  61          //产生ACK应答
  62          void TCS34725_I2C_ACK()
  63          {
  64   1        TCS_SCL_L;
  65   1        TCS_SDA_L;
  66   1        delay_s(20);//delay_us(2);
  67   1        TCS_SCL_H;
  68   1        delay_s(20);//delay_us(2);
  69   1        TCS_SCL_L;
  70   1      }
  71          /*********************************************/
  72          //不产生ACK应答       
  73          void TCS34725_I2C_NACK()
  74          {
  75   1        TCS_SCL_L;
  76   1        TCS_SDA_H;
  77   1        delay_s(20);//delay_us(2);
  78   1        TCS_SCL_H;
  79   1        delay_s(20);//delay_us(2);
  80   1        TCS_SCL_L;
  81   1      }
  82          /*********************************************/
  83          //I2C发送一个字节     
  84          void TCS34725_I2C_Send_Byte(u8 byte)
  85          {
  86   1        u8 i;
  87   1        
  88   1        TCS_SCL_L;//拉低时钟开始数据传输
  89   1        for(i = 0; i < 8; i++)
  90   1        {
  91   2          if(((byte&0x80)>>7)==1) {
  92   3            TCS_SDA_H;
  93   3          } else {
  94   3            TCS_SDA_L;
  95   3          }
  96   2          byte <<= 1;
  97   2          
  98   2          delay_s(20);//delay_us(2);
  99   2          TCS_SCL_H;
 100   2          delay_s(20);//delay_us(2);
 101   2          TCS_SCL_L;
 102   2          delay_s(20);//delay_us(2);
 103   2        } 
 104   1      }
 105          /*********************************************/
 106          //读1个字节，ack=1时，发送ACK，ack=0，发送nACK   
 107          u8 TCS34725_I2C_Read_Byte(u8 ack)
 108          {
 109   1        u8 i,receive = 0;
 110   1        
 111   1        for(i = 0; i < 8; i++)
 112   1        {
 113   2          TCS_SCL_L;
 114   2          delay_s(20);//delay_us(2);
 115   2          TCS_SCL_H;
 116   2          receive <<= 1;
C51 COMPILER V9.56.0.0   Z_COLOR                                                           08/20/2020 16:29:15 PAGE 3   

 117   2          if(TCS_SDA_READ) receive++;
 118   2          delay_s(10);//delay_us(1);
 119   2        }
 120   1        if (!ack) TCS34725_I2C_NACK();//发送nACK
 121   1        else TCS34725_I2C_ACK(); //发送ACK 
 122   1        
 123   1        return receive;
 124   1      }
 125          /*********************************************/
 126          /*******************************************************************************
 127           * @brief Writes data to a slave device.
 128           *
 129           * @param slaveAddress - Adress of the slave device.
 130           * @param dataBuffer - Pointer to a buffer storing the transmission data.
 131           * @param bytesNumber - Number of bytes to write.
 132           * @param stopBit - Stop condition control.
 133           *                  Example: 0 - A stop condition will not be sent;
 134           *                           1 - A stop condition will be sent.
 135          *******************************************************************************/
 136          void TCS34725_I2C_Write(u8 slaveAddress, u8* dataBuffer,u8 bytesNumber, u8 stopBit)
 137          {
 138   1        u8 i = 0;
 139   1        
 140   1        TCS34725_I2C_Start();
 141   1        TCS34725_I2C_Send_Byte((slaveAddress << 1) | 0x00);    //发送从机地址写命令
 142   1        TCS34725_I2C_Wait_ACK();
 143   1        for(i = 0; i < bytesNumber; i++)
 144   1        {
 145   2          TCS34725_I2C_Send_Byte(*(dataBuffer + i));
 146   2          TCS34725_I2C_Wait_ACK();
 147   2        }
 148   1        if(stopBit == 1) TCS34725_I2C_Stop();
 149   1      }
 150          /*******************************************************************************
 151           * @brief Reads data from a slave device.
 152           *
 153           * @param slaveAddress - Adress of the slave device.
 154           * @param dataBuffer - Pointer to a buffer that will store the received data.
 155           * @param bytesNumber - Number of bytes to read.
 156           * @param stopBit - Stop condition control.
 157           *                  Example: 0 - A stop condition will not be sent;
 158           *                           1 - A stop condition will be sent.
 159          *******************************************************************************/
 160          void TCS34725_I2C_Read(u8 slaveAddress, u8* dataBuffer, u8 bytesNumber, u8 stopBit)
 161          {
 162   1        u8 i = 0;
 163   1        
 164   1        TCS34725_I2C_Start();
 165   1        TCS34725_I2C_Send_Byte((slaveAddress << 1) | 0x01);    //发送从机地址读命令
 166   1        TCS34725_I2C_Wait_ACK();
 167   1        for(i = 0; i < bytesNumber; i++)
 168   1        {
 169   2          if(i == bytesNumber - 1)
 170   2          {
 171   3            *(dataBuffer + i) = TCS34725_I2C_Read_Byte(0);//读取的最后一个字节发送NACK
 172   3          }
 173   2          else
 174   2          {
 175   3            *(dataBuffer + i) = TCS34725_I2C_Read_Byte(1);
 176   3          }
 177   2        }
 178   1        if(stopBit == 1) TCS34725_I2C_Stop();
C51 COMPILER V9.56.0.0   Z_COLOR                                                           08/20/2020 16:29:15 PAGE 4   

 179   1      }
 180          /*******************************************************************************
 181           * @brief Writes data into TCS34725 registers, starting from the selected
 182           *        register address pointer.
 183           *
 184           * @param subAddr - The selected register address pointer.
 185           * @param dataBuffer - Pointer to a buffer storing the transmission data.
 186           * @param bytesNumber - Number of bytes that will be sent.
 187           *
 188           * @return None.
 189          *******************************************************************************/
 190          void TCS34725_Write(u8 subAddr, u8* dataBuffer, u8 bytesNumber)
 191          {
 192   1          u8 sendBuffer[10] = {0, };
 193   1          u8 byte = 0;
 194   1          
 195   1          sendBuffer[0] = subAddr | TCS34725_COMMAND_BIT;
 196   1          for(byte = 1; byte <= bytesNumber; byte++)
 197   1          {
 198   2              sendBuffer[byte] = dataBuffer[byte - 1];
 199   2          }
 200   1        TCS34725_I2C_Write(TCS34725_ADDRESS, sendBuffer, bytesNumber + 1, 1);
 201   1      }
 202          /*******************************************************************************
 203           * @brief Reads data from TCS34725 registers, starting from the selected
 204           *        register address pointer.
 205           *
 206           * @param subAddr - The selected register address pointer.
 207           * @param dataBuffer - Pointer to a buffer that will store the received data.
 208           * @param bytesNumber - Number of bytes that will be read.
 209           *
 210           * @return None.
 211          *******************************************************************************/
 212          void TCS34725_Read(u8 subAddr, u8* dataBuffer, u8 bytesNumber)
 213          {
 214   1        subAddr |= TCS34725_COMMAND_BIT;
 215   1        
 216   1        TCS34725_I2C_Write(TCS34725_ADDRESS, (u8*)&subAddr, 1, 0);
 217   1        TCS34725_I2C_Read(TCS34725_ADDRESS, dataBuffer, bytesNumber, 1);
 218   1      }
 219          /*******************************************************************************
 220           * @brief TCS34725设置积分时间
 221           *
 222           * @return None
 223          *******************************************************************************/
 224          void TCS34725_SetIntegrationTime(u8 time)
 225          {
 226   1        TCS34725_Write(TCS34725_ATIME, &time, 1);
 227   1      }
 228          /*******************************************************************************
 229           * @brief TCS34725设置增益
 230           *
 231           * @return None
 232          *******************************************************************************/
 233          void TCS34725_SetGain(u8 gain)
 234          {
 235   1        TCS34725_Write(TCS34725_CONTROL, &gain, 1);
 236   1      }
 237          /*******************************************************************************
 238           * @brief TCS34725使能
 239           *
 240           * @return None
C51 COMPILER V9.56.0.0   Z_COLOR                                                           08/20/2020 16:29:15 PAGE 5   

 241          *******************************************************************************/
 242          void TCS34725_Enable(void)
 243          {
 244   1        u8 cmd = TCS34725_ENABLE_PON;
 245   1        
 246   1        TCS34725_Write(TCS34725_ENABLE, &cmd, 1);
 247   1        cmd = TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN;
 248   1        TCS34725_Write(TCS34725_ENABLE, &cmd, 1);
 249   1        //delay_s(600000);//delay_ms(3);//延时应该放在设置AEN之后
 250   1      }
 251          /*******************************************************************************
 252           * @brief TCS34725失能
 253           *
 254           * @return None
 255          *******************************************************************************/
 256          void TCS34725_Disable(void)
 257          {
 258   1        u8 cmd = 0;
 259   1        
 260   1        TCS34725_Read(TCS34725_ENABLE, &cmd, 1);
 261   1        cmd = cmd & ~(TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 262   1        TCS34725_Write(TCS34725_ENABLE, &cmd, 1);
 263   1      }
 264          
 265          void TCS34725_LedON(u8 enable) {
 266   1        u8 cmd = 0;
 267   1        TCS34725_Read(TCS34725_ENABLE, &cmd, 1);
 268   1        if(enable) {
 269   2          cmd |= TCS34725_ENABLE_AIEN;
 270   2        } else {
 271   2          cmd &= ~TCS34725_ENABLE_AIEN;
 272   2        }
 273   1        TCS34725_Write(TCS34725_ENABLE, &cmd, 1);
 274   1      }
 275          
 276          /*******************************************************************************
 277           * @brief TCS34725初始化
 278           *
 279           * @return ID - ID寄存器中的值
 280          *******************************************************************************/
 281          u8 TCS34725_Init(u8 time)
 282          {
 283   1        u8 id=0;
 284   1        
 285   1        TCS34725_I2C_Init(); 
 286   1        TCS34725_Read(TCS34725_ID, &id, 1);  //TCS34725 的 ID 是 0x44 可以根据这个来判断是否成功连接
 287   1        if(id==0x44)
 288   1          {
 289   2            TCS34725_SetIntegrationTime(time);
 290   2            TCS34725_SetGain(TCS34725_GAIN_1X);
 291   2            TCS34725_Enable();
 292   2            return 1;
 293   2          }
 294   1        return 0;
 295   1      }
 296          /*******************************************************************************
 297           * @brief TCS34725获取单个通道数据
 298           *
 299           * @return data - 该通道的转换值
 300          *******************************************************************************/
 301          u16 TCS34725_GetChannelData(u8 reg)
 302          {
C51 COMPILER V9.56.0.0   Z_COLOR                                                           08/20/2020 16:29:15 PAGE 6   

 303   1        u8 tmp[2] = {0,0};
 304   1        u16 mydata;
 305   1        
 306   1        TCS34725_Read(reg, tmp, 2);
 307   1        mydata = (tmp[1] << 8) | tmp[0];
 308   1        
 309   1        return mydata;
 310   1      }
 311          /*******************************************************************************
 312           * @brief TCS34725获取各个通道数据
 313           *
 314           * @return 1 - 转换完成，数据可用
 315           *       0 - 转换未完成，数据不可用
 316          *******************************************************************************/
 317          u8 TCS34725_GetRawData(COLOR_RGBC *rgbc)
 318          {
 319   1        u8 status = TCS34725_STATUS_AVALID;
 320   1        
 321   1        TCS34725_Read(TCS34725_STATUS, &status, 1);
 322   1        
 323   1        if(status & TCS34725_STATUS_AVALID)
 324   1        {
 325   2          rgbc->c = TCS34725_GetChannelData(TCS34725_CDATAL); 
 326   2          rgbc->r = TCS34725_GetChannelData(TCS34725_RDATAL); 
 327   2          rgbc->g = TCS34725_GetChannelData(TCS34725_GDATAL); 
 328   2          rgbc->b = TCS34725_GetChannelData(TCS34725_BDATAL);
 329   2          return 1;
 330   2        }
 331   1        return 0;
 332   1      }
 333          
 334          u16 TCS34725_GetR(void) {
 335   1      //  COLOR_RGBC rgbc;
 336   1        u8 status = TCS34725_STATUS_AVALID;
 337   1        
 338   1        TCS34725_Read(TCS34725_STATUS, &status, 1);
 339   1        
 340   1        if(status & TCS34725_STATUS_AVALID){
 341   2          return TCS34725_GetChannelData(TCS34725_RDATAL);  
 342   2        }
 343   1        return 0;
 344   1      }
 345          
 346          u16 TCS34725_GetG(void) {
 347   1      //  COLOR_RGBC rgbc;
 348   1        u8 status = TCS34725_STATUS_AVALID;
 349   1        
 350   1        TCS34725_Read(TCS34725_STATUS, &status, 1);
 351   1        
 352   1        if(status & TCS34725_STATUS_AVALID){
 353   2          return TCS34725_GetChannelData(TCS34725_GDATAL);  
 354   2        }
 355   1        return 0;
 356   1      }
 357          
 358          u16 TCS34725_GetB(void) {
 359   1      //  COLOR_RGBC rgbc;
 360   1        u8 status = TCS34725_STATUS_AVALID;
 361   1        
 362   1        TCS34725_Read(TCS34725_STATUS, &status, 1);
 363   1        
 364   1        if(status & TCS34725_STATUS_AVALID){
C51 COMPILER V9.56.0.0   Z_COLOR                                                           08/20/2020 16:29:15 PAGE 7   

 365   2          return TCS34725_GetChannelData(TCS34725_BDATAL);
 366   2        }
 367   1        return 0;
 368   1      }
 369          
 370          u16 TCS34725_GetC(void) {
 371   1      //  COLOR_RGBC rgbc;
 372   1        u8 status = TCS34725_STATUS_AVALID;
 373   1        
 374   1        TCS34725_Read(TCS34725_STATUS, &status, 1);
 375   1        
 376   1        if(status & TCS34725_STATUS_AVALID){
 377   2          return TCS34725_GetChannelData(TCS34725_CDATAL);  
 378   2        }
 379   1        return 0;
 380   1      }
 381          
 382          
 383          /******************************************************************************/
 384          //RGB转HSL
 385          void RGBtoHSL(COLOR_RGBC *Rgb, COLOR_HSL *Hsl)
 386          {
 387   1        u8 maxVal,minVal,difVal;
 388   1        u8 r = Rgb->r*100/Rgb->c;   //[0-100]
 389   1        u8 g = Rgb->g*100/Rgb->c;
 390   1        u8 b = Rgb->b*100/Rgb->c;
 391   1        
 392   1        maxVal = max3v(r,g,b);
 393   1        minVal = min3v(r,g,b);
 394   1        difVal = maxVal-minVal;
 395   1        
 396   1        //计算亮度
 397   1        Hsl->l = (maxVal+minVal)/2;
 398   1        
 399   1        if(maxVal == minVal)//若r=g=b,灰度
 400   1        {
 401   2          Hsl->h = 0; 
 402   2          Hsl->s = 0;
 403   2        }
 404   1        else
 405   1        {
 406   2          //计算色调
 407   2          if(maxVal==r)
 408   2          {
 409   3            if(g>=b)
 410   3              Hsl->h = 60*(g-b)/difVal;
 411   3            else
 412   3              Hsl->h = 60*(g-b)/difVal+360;
 413   3          }
 414   2          else
 415   2            {
 416   3              if(maxVal==g)Hsl->h = 60*(b-r)/difVal+120;
 417   3              else
 418   3                if(maxVal==b)Hsl->h = 60*(r-g)/difVal+240;
 419   3            }
 420   2          
 421   2          //计算饱和度
 422   2          if(Hsl->l<=50)Hsl->s=difVal*100/(maxVal+minVal);  //[0-100]
 423   2          else
 424   2            Hsl->s=difVal*100/(200-(maxVal+minVal));
 425   2        }
 426   1      }
C51 COMPILER V9.56.0.0   Z_COLOR                                                           08/20/2020 16:29:15 PAGE 8   

 427          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1893    ----
   CONSTANT SIZE    =     12    ----
   XDATA SIZE       =     12      73
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
