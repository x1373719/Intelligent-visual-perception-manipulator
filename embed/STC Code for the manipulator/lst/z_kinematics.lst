C51 COMPILER V9.60.0.0   Z_KINEMATICS                                                      07/09/2022 18:24:19 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE Z_KINEMATICS
OBJECT MODULE PLACED IN .\obj\z_kinematics.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\z_kinematics.c LARGE OPTIMIZE(8,SPEED) BROWSE ORDER INCDIR(.\src) DE
                    -BUG OBJECTEXTEND PRINT(.\lst\z_kinematics.lst) TABS(2) OBJECT(.\obj\z_kinematics.obj)

line level    source

   1          #include "z_kinematics.h"
   2          #include <math.h>
   3          
   4          #define pi 3.1415926
   5          
   6          /*
   7            设置四个关节的长度
   8            单位0.1mm
   9          */
  10          
  11          void setup_kinematics(float L0, float L1, float L2, float L3, kinematics_t *kinematics) {
  12   1        //放大10倍
  13   1        kinematics->L0 = L0*10;
  14   1        kinematics->L1 = L1*10;
  15   1        kinematics->L2 = L2*10;
  16   1        kinematics->L3 = L3*10;
  17   1      }
  18          
  19          /*
  20            x,y 为映射到平面的坐标
  21            z为距离地面的距离
  22            Alpha 为爪子和平面的夹角 -25~-65范围比较好
  23          */
  24          
  25          int kinematics_analysis(float x, float y, float z, float Alpha, kinematics_t *kinematics) {
  26   1        float theta3, theta4, theta5, theta6;
  27   1        float l0, l1, l2, l3;
  28   1        float aaa, bbb, ccc, zf_flag;
  29   1        
  30   1        //放大10倍
  31   1        x = x*10;
  32   1        y = y*10;
  33   1        z = z*10;
  34   1        
  35   1        l0 = kinematics->L0;
  36   1        l1 = kinematics->L1;
  37   1        l2 = kinematics->L2;
  38   1        l3 = kinematics->L3;
  39   1        
  40   1        if(x == 0) {
  41   2          theta6 = 0.0;
  42   2        } else {
  43   2          theta6 = atan(x/y)*180.0/pi;
  44   2        }
  45   1        
  46   1        y = sqrt(x*x + y*y);//x y 斜边 
  47   1          y = y-l3 * cos(Alpha*pi/180.0);  
  48   1          z = z-l0-l3*sin(Alpha*pi/180.0); 
  49   1          if(z < -l0) {
  50   2              return 1;
  51   2        }
  52   1          if(sqrt(y*y + z*z) > (l1+l2)) {
  53   2              return 2;
  54   2        }
C51 COMPILER V9.60.0.0   Z_KINEMATICS                                                      07/09/2022 18:24:19 PAGE 2   

  55   1        
  56   1        ccc = acos(y / sqrt(y * y + z * z));
  57   1          bbb = (y*y+z*z+l1*l1-l2*l2)/(2*l1*sqrt(y*y+z*z));
  58   1          if(bbb > 1 || bbb < -1) {
  59   2              return 3;
  60   2        }
  61   1          if (z < 0) {
  62   2              zf_flag = -1;
  63   2        } else {
  64   2              zf_flag = 1;
  65   2        }
  66   1          theta5 = ccc * zf_flag + acos(bbb);
  67   1          theta5 = theta5 * 180.0 / pi;
  68   1          if(theta5 > 180.0 || theta5 < 0.0) {
  69   2              return 4;
  70   2        }
  71   1        
  72   1          aaa = -(y*y+z*z-l1*l1-l2*l2)/(2*l1*l2);
  73   1          if (aaa > 1 || aaa < -1) {
  74   2              return 5;
  75   2        }
  76   1          theta4 = acos(aaa); 
  77   1          theta4 = 180.0 - theta4 * 180.0 / pi ;  
  78   1          if (theta4 > 135.0 || theta4 < -135.0) {
  79   2              return 6;
  80   2        }
  81   1      
  82   1          theta3 = Alpha - theta5 + theta4;
  83   1          if(theta3 > 90.0 || theta3 < -90.0) {
  84   2              return 7;
  85   2        }
  86   1        
  87   1        kinematics->servo_angle[0] = theta6;
  88   1        kinematics->servo_angle[1] = theta5-90;
  89   1        kinematics->servo_angle[2] = theta4;
  90   1        kinematics->servo_angle[3] = theta3;    
  91   1        
  92   1        kinematics->servo_pwm[0] = (int)(1500-2000.0 * kinematics->servo_angle[0] / 270.0);
  93   1        kinematics->servo_pwm[1] = (int)(1500+2000.0 * kinematics->servo_angle[1] / 270.0);
  94   1        kinematics->servo_pwm[2] = (int)(1500+2000.0 * kinematics->servo_angle[2] / 270.0);
  95   1        kinematics->servo_pwm[3] = (int)(1500-2000.0 * kinematics->servo_angle[3] / 270.0);
  96   1      
  97   1        return 0;
  98   1      }
  99          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2509    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      86
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
