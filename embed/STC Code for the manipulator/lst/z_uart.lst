C51 COMPILER V9.60.0.0   Z_UART                                                            07/09/2022 18:24:19 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE Z_UART
OBJECT MODULE PLACED IN .\obj\z_uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\z_uart.c LARGE OPTIMIZE(8,SPEED) BROWSE ORDER INCDIR(.\src) DEBUG OB
                    -JECTEXTEND PRINT(.\lst\z_uart.lst) TABS(2) OBJECT(.\obj\z_uart.obj)

line level    source

   1          #include "z_uart.h"
   2          #include "z_stc15.h"
   3          #include "z_global.h"
   4          #include "z_timer.h"
   5          #include "z_gpio.h"
   6          #include <string.h>
   7          
   8          #define FOSC  22118400L          //系统频率
   9          //#define FOSC  11059200L          //系统频率
  10          
  11          
  12          #define S2RI  0x01    // 宏定义 串口2寄存器
  13          #define S2TI  0x02   // 宏定义 串口2寄存器
  14          #define S4RI  0x01              //S4CON.0
  15          #define S4TI  0x02              //S4CON.1
  16          
  17          #define S4_S0 0x04              //P_SW2.2
  18          
  19          #define ISPPROGRAM() ((void(code*)())0xF000)()
  20          
  21          u8 busy2 = 0, busy4 = 0;
  22          u32 uart_timeout = 0;
  23          
  24          u32 get_uart_timeout(void) {
  25   1        return uart_timeout;
  26   1      }
  27          
  28          void uart1_init(u32 baud) {
  29   1        SCON |= 0x50;       //串口1方式1,接收充许    
  30   1        T2L = (65536 - (FOSC/4/baud));
  31   1        T2H = (65536 - (FOSC/4/baud))>>8;
  32   1        AUXR |= 0x15;       //串口1使用独立波特率发生器，独立波特率发生器1T 
  33   1        PCON = 0;//0x7F;    //
  34   1        
  35   1      //  SCON = 0x50;    //8位数据,可变波特率
  36   1      //  AUXR |= 0x01;   //串口1选择定时器2为波特率发生器
  37   1      //  AUXR |= 0x04;   //定时器2时钟为Fosc,即1T
  38   1      //  T2L = 0xD0;     //设定定时初值
  39   1      //  T2H = 0xFF;     //设定定时初值
  40   1      //  AUXR |= 0x10;   //启动定时器2
  41   1        
  42   1        EA = 1;   
  43   1        ES = 1;             //  
  44   1      }
  45          
  46          void uart2_init(u32 baud) {
  47   1        S2CON = 0x50;         //
  48   1        T2L = (65536 - (FOSC/4/baud));    //
  49   1        T2H = (65536 - (FOSC/4/baud))>>8; //
  50   1        IE2 = 0x01;
  51   1        P_SW2 |= 0x01;  //TX2 4.7 RX2 4.6 
  52   1        EA = 1; 
  53   1      }
  54          
C51 COMPILER V9.60.0.0   Z_UART                                                            07/09/2022 18:24:19 PAGE 2   

  55          void uart4_init(u32 baud) {
  56   1      
  57   1      //  S4CON = 0xda;
  58   1      //    T4L = (65536 - (FOSC/4/BAUD4));   //设置波特率重装值
  59   1      //    T4H = (65536 - (FOSC/4/BAUD4))>>8;
  60   1      //    T4T3M |= 0x20;              //定时器4为1T模式
  61   1      //    T4T3M |= 0x80;              //定时器4开始计时
  62   1        
  63   1        P_SW2 &= ~S4_S0;            //S4_S0=0 (P0.2/RxD4, P0.3/TxD4)
  64   1        S4CON = 0x10;               //8位可变波特率
  65   1        T2L = (65536 - (FOSC/4/baud));   //设置波特率重装值
  66   1        T2H = (65536 - (FOSC/4/baud))>>8;
  67   1        AUXR |= 0x14;                //T2为1T模式, 并启动定时器2
  68   1          
  69   1        IE2 |= 0x10;                 //使能串口4中断
  70   1          EA = 1;
  71   1      }
  72          
  73          
  74          void uart1_open(void) {
  75   1        ES = 1;
  76   1      }
  77          
  78          void uart1_close(void) {
  79   1        ES = 0;
  80   1      }
  81          
  82          void uart2_open(void) {
  83   1        //ES2 = 1;
  84   1        IE2 |= 0x01; 
  85   1      }
  86          
  87          void uart2_close(void) {
  88   1        //ES2 = 0;
  89   1        IE2 &= (~0x01); 
  90   1      }
  91          
  92          void uart4_open(void) {
  93   1        //ES2 = 1;
  94   1        IE2 |= 0x10; 
  95   1      }
  96          
  97          void uart4_close(void) {
  98   1        //ES2 = 0;
  99   1        IE2 &= (~0x10); 
 100   1      }
 101          
 102          
 103          /*----------------------------
 104          
 105          ----------------------------*/
 106          void uart1_send_byte(u8 dat) {
 107   1        int i=0;
 108   1          SBUF = dat;   
 109   1          while(TI == 0 && i++<1000);   
 110   1          TI = 0; 
 111   1      }
 112          
 113          void uart2_send_byte(u8 dat) {
 114   1        int i=0;
 115   1          S2BUF = dat;   
 116   1        while(!(S2CON & S2TI) && i++<1000);
C51 COMPILER V9.60.0.0   Z_UART                                                            07/09/2022 18:24:19 PAGE 3   

 117   1        S2CON &= ~S2TI; 
 118   1      }
 119          
 120          void uart4_send_byte(u8 dat) {
 121   1        int i=0;
 122   1          S4BUF = dat;                        //写数据到UART4数据寄存器
 123   1        while (!(S4CON & S4TI) && i++<1000);        //等待前面的数据发送完成
 124   1          S4CON &= ~S4TI;                   //清除S4TI位
 125   1      }
 126          
 127          /*----------------------------
 128          
 129          ----------------------------*/
 130          void uart1_send_str(char *s) {
 131   1        timer0_close();
 132   1          while (*s) {                    //
 133   2              uart1_send_byte(*s++);         //
 134   2          }
 135   1        timer0_open();
 136   1      }
 137          
 138          void uart2_send_str(char *s) {
 139   1          while (*s) {                      //
 140   2              uart2_send_byte(*s++);         //
 141   2          }
 142   1      }
 143          
 144          void uart4_send_str(char *s) {
 145   1          while (*s) {                      //
 146   2              uart4_send_byte(*s++);         //
 147   2          }
 148   1      }
 149          
 150          void zx_uart_send_str(char *s) {
 151   1        timer0_close();
 152   1        uart1_get_ok = 1;
 153   1          while (*s) {                      //
 154   2              uart2_send_byte(*s++);         //
 155   2          }
 156   1        uart1_get_ok = 0;
 157   1        timer0_open();
 158   1      }
 159          
 160          
 161          /*----------------------------
 162          
 163          数据格式:
 164          命令    $xxx!
 165          单个舵机  #0P1000T1000!
 166          多个舵机  {#0P1000T1000!#1P1000T1000!}
 167          存储命令  <#0P1000T1000!#1P1000T1000!>
 168          
 169          -----------------------------*/
 170          void Uart1() interrupt 4 using 2 {
 171   1        static u16 buf_index = 0;
 172   1        static u8 sbuf_bak, cntf8 = 0;
 173   1        
 174   1          if (RI) {
 175   2          RI = 0;                 //清除RI位
 176   2          sbuf_bak = SBUF;
 177   2          //uart1_send_byte(sbuf_bak);    
 178   2      
C51 COMPILER V9.60.0.0   Z_UART                                                            07/09/2022 18:24:19 PAGE 4   

 179   2          if(sbuf_bak == 0) {
 180   3            cntf8++;
 181   3            if(cntf8 >= 15) {
 182   4              IAP_CONTR = 0X60;
 183   4            }
 184   3          } else {
 185   3            cntf8 = 0;
 186   3          }
 187   2          
 188   2          if(uart1_get_ok)return;
 189   2          
 190   2          if(sbuf_bak == '<') {
 191   3            uart1_mode = 4;
 192   3            buf_index = 0;
 193   3          } else if(uart1_mode == 0) {
 194   3            if(sbuf_bak == '$') {
 195   4              uart1_mode = 1;
 196   4            } else if(sbuf_bak == '#') {
 197   4              uart1_mode = 2;
 198   4            } else if(sbuf_bak == '{') {
 199   4              uart1_mode = 3;
 200   4            } else if(sbuf_bak == '<') {
 201   4              uart1_mode = 4;
 202   4            } 
 203   3            buf_index = 0;
 204   3          }
 205   2          
 206   2          uart_receive_buf[buf_index++] = sbuf_bak;
 207   2          
 208   2          if(uart1_mode == 4) {
 209   3            if(sbuf_bak == '>') {
 210   4              uart_receive_buf[buf_index] = '\0';
 211   4              uart1_get_ok = 1;
 212   4              buf_index = 0;
 213   4              //uart1_send_str("ok");
 214   4            }
 215   3            //uart1_close();
 216   3          } else if((uart1_mode == 1) && (sbuf_bak == '!')){
 217   3            uart_receive_buf[buf_index] = '\0';
 218   3            uart1_get_ok = 1;
 219   3            buf_index = 0;
 220   3          } else if((uart1_mode == 2) && (sbuf_bak == '!')){
 221   3            uart_receive_buf[buf_index] = '\0';
 222   3            uart1_get_ok = 1;
 223   3            buf_index = 0;
 224   3          } else if((uart1_mode == 3) && (sbuf_bak == '}')){
 225   3            uart_receive_buf[buf_index] = '\0';
 226   3            uart1_get_ok = 1;
 227   3            buf_index = 0;
 228   3          }  
 229   2          
 230   2          if(buf_index >= UART_BUF_SIZE) {
 231   3            buf_index = 0;
 232   3          }
 233   2      
 234   2          }
 235   1        
 236   1      //    if (TI) {
 237   1      //        TI = 0;                 //清除TI位
 238   1      //    }
 239   1      }
 240          
C51 COMPILER V9.60.0.0   Z_UART                                                            07/09/2022 18:24:19 PAGE 5   

 241          void UART2_Int(void) interrupt  8 using 2 // 串口2中断服务程序
 242          {
 243   1        static u16 buf_index = 0;
 244   1        static u8 sbuf_bak;
 245   1        if(S2CON&S2RI)          // 判断是不是接收数据引起的中断
 246   1        {   
 247   2          sbuf_bak = S2BUF;
 248   2          S2CON &= ~S2RI;
 249   2          
 250   2          if(uart1_get_ok)return;
 251   2          
 252   2          
 253   2          if(sbuf_bak == '<') {
 254   3            uart1_mode = 4;
 255   3            buf_index = 0;
 256   3            uart_timeout = millis();
 257   3          } else if(uart1_mode == 0) {
 258   3            if(sbuf_bak == '$') {
 259   4              uart1_mode = 1;
 260   4            } else if(sbuf_bak == '#') {
 261   4              uart1_mode = 2;
 262   4            } else if(sbuf_bak == '{') {
 263   4              uart1_mode = 3;
 264   4            } else if(sbuf_bak == '<') {
 265   4              uart1_mode = 4;
 266   4            } 
 267   3            buf_index = 0;
 268   3          }
 269   2          
 270   2          uart_receive_buf[buf_index++] = sbuf_bak;
 271   2          
 272   2          if(uart1_mode == 4) {
 273   3            if(sbuf_bak == '>') {
 274   4              //uart1_close();
 275   4              uart_receive_buf[buf_index] = '\0';
 276   4              uart1_get_ok = 1;
 277   4              buf_index = 0;
 278   4            }
 279   3          } else if((uart1_mode == 1) && (sbuf_bak == '!')){
 280   3            uart_receive_buf[buf_index] = '\0';
 281   3            uart1_get_ok = 1;
 282   3            buf_index = 0;
 283   3          } else if((uart1_mode == 2) && (sbuf_bak == '!')){
 284   3            uart_receive_buf[buf_index] = '\0';
 285   3            uart1_get_ok = 1;
 286   3            buf_index = 0;
 287   3          } else if((uart1_mode == 3) && (sbuf_bak == '}')){
 288   3            uart_receive_buf[buf_index] = '\0';
 289   3            uart1_get_ok = 1;
 290   3            buf_index = 0;
 291   3          }   
 292   2      
 293   2          if(buf_index >= UART_BUF_SIZE)buf_index = 0;
 294   2          //uart2_send_byte(sbuf_bak);
 295   2        }
 296   1        
 297   1      //  if (S2CON&S2TI)// 接收到发送命令
 298   1      //  {
 299   1      //    busy2 = 0;
 300   1      //  }
 301   1      }
 302          
C51 COMPILER V9.60.0.0   Z_UART                                                            07/09/2022 18:24:19 PAGE 6   

 303          /*----------------------------
 304          UART4 中断服务程序
 305          -----------------------------*/
 306          void Uart4() interrupt 18 using 2 {
 307   1        static u16 buf_index = 0;
 308   1        static u8 sbuf_bak;
 309   1          if (S4CON & S4RI) {
 310   2              S4CON &= ~S4RI;         //清除S4RI位
 311   2              sbuf_bak = S4BUF;       //P0显示串口数据
 312   2          
 313   2      //      uart4_send_byte(sbuf_bak);
 314   2      //    return;
 315   2          
 316   2          if(uart1_get_ok)return;
 317   2          
 318   2          if(sbuf_bak == '<') {
 319   3            uart1_mode = 4;
 320   3            buf_index = 0;
 321   3            uart_timeout = millis();
 322   3          } else if(uart1_mode == 0) {
 323   3            if(sbuf_bak == '$') {
 324   4              uart1_mode = 1;
 325   4            } else if(sbuf_bak == '#') {
 326   4              uart1_mode = 2;
 327   4            } else if(sbuf_bak == '{') {
 328   4              uart1_mode = 3;
 329   4            } else if(sbuf_bak == '<') {
 330   4              uart1_mode = 4;
 331   4            } 
 332   3            buf_index = 0;
 333   3          }
 334   2          
 335   2          uart_receive_buf[buf_index++] = sbuf_bak;
 336   2          
 337   2          if(uart1_mode == 4) {
 338   3            
 339   3            if(sbuf_bak == '>') {
 340   4              uart_receive_buf[buf_index] = '\0';
 341   4              uart1_get_ok = 1;
 342   4              buf_index = 0;
 343   4            }
 344   3          } else if((uart1_mode == 1) && (sbuf_bak == '!')){
 345   3            uart_receive_buf[buf_index] = '\0';
 346   3            uart1_get_ok = 1;
 347   3            buf_index = 0;
 348   3          } else if((uart1_mode == 2) && (sbuf_bak == '!')){
 349   3            uart_receive_buf[buf_index] = '\0';
 350   3            uart1_get_ok = 1;
 351   3            buf_index = 0;
 352   3          } else if((uart1_mode == 3) && (sbuf_bak == '}')){
 353   3            uart_receive_buf[buf_index] = '\0';
 354   3            uart1_get_ok = 1;
 355   3            buf_index = 0;
 356   3          }   
 357   2      
 358   2          if(buf_index >= UART_BUF_SIZE)buf_index = 0;
 359   2          }
 360   1      //    if (S4CON & S4TI)
 361   1      //    {
 362   1      //        S4CON &= ~S4TI;         //清除S4TI位
 363   1      //    busy4 = 0;               //清忙标志
 364   1      //    }
C51 COMPILER V9.60.0.0   Z_UART                                                            07/09/2022 18:24:19 PAGE 7   

 365   1      }
 366          
 367          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1482    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     16      24
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
